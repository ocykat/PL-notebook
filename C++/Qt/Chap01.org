#+TITLE: CHAPTER 1: Getting started with Qt
#+CREATOR: Nhat Minh Nguyen
#+DATE: 20-10-2019
#+OPTIONS: toc: 2

[[https://wiki.qt.io/Qt_for_Beginners][Full Tutorial]]

* Build options

There are some build options for Qt:
- qmake
- cmake
  
* How a Qt program is compiled

The compilation process includes 3 steps:
1. A .pro file is written to describe the project to compile
2. A Makefile is generated by qmake/cmake
3. The program is built using make
   
* Simple program

#+BEGIN_SRC C++
#include <QApplication>

int main(int argc, char** argv) {
    QApplication app(argc, argv);
    return app.exec();
}
#+END_SRC

* Qt Class Hierarchy

Qt class hierarchy:
- QObject
  - QThread
  - QWidget
    - QAbstractButton
      - QCheckBox
      - QPushButton
      - QRadioButton
    - QFrame
      - QAbstractScrollArea
        - QGraphicsView
        - QTextEdit
      - QLabel
    - QProgressBar

* Parenting System

Any object that inherits from QObject can have a parent and children:
- When an object is destroyed, all of its children are destroyed as well. So, calling delete becomes optional in certain cases.
- All QObjects have findChild and findChildren methods that can be used to search for children of a given object.
- Child widgets in a QWidget automatically appear inside the parent widget.
  
* Subclassing QWidget

Example:
- =window.h=

#+BEGIN_SRC C++
#ifndef WINDOW_H
#define WINDOW_H

class Window : public QWidget {
    Q_OBJECT
    public:
        explicit Window(QWidget* parent = NULL);
    signals:
    public slots:
};

#endif // WINDOW_H
#+END_SRC

There are some special elements in the declaration of the class:
- The =Q_OBJECT= macro.
- A new category of method =signals=
- A new category of method =public slots=
  
* Signals and Slots
** Introduction
*** Definition
- A *signal* is a message that an object sends to inform a status change.
- A slot is a function that is used to accept and respond to a signal.

*** Example

#+BEGIN_SRC C++
FooA* fooA = new FooA();
FooB* fooB = new FooB();
QObject::connect(fooA, SIGNAL(foo_a_signal()), fooB, SLOT(foo_b_slot()));
#+END_SRC

*** Usage
- The signatures of the signal and the slot have to be written inside the =SIGNAL= and the =SLOT= macros.
- Signals and slots are methods that might or might not have arguments, but never return anything.
- A signal can be connected to several slots.
- Many signals can be connected to a slot.
- A signal can be connected to another signal. The second signal is sent when the first signal is sent. This is called *signal relaying*.

** Transmiting information
*** Example
*Scenario*: There is a =QProgressBar= displaying a the percentage done of process. This process is managed by a =ProgressManager=. After a time window, some percentages of the process is done, and the =ProgressManager= send the number =percentage= to the =QProgressBar= to display. In this scenario, we may have a signal and a slot as follow:

#+BEGIN_SRC C++
void ProgressManager::tick(int increment);
void QProgressBar::setPercentage(int percentage);
#+END_SRC

If the data types of the parameters of the signal and the corresponding slot are not the same, there will be a warning at runtime.

#+BEGIN_SRC
QObject::connect: Incompatible sender/receiver arguments
#+END_SRC

Code for the connection:

#+BEGIN_SRC C++
ProgressManager *manager = new ProgressManager();
QProgressBar *progress = new QProgressBar(window);

QObject::connect(manager, SIGNAL (tick(int)), progress, SLOT (setPercentage(int)));
#+END_SRC

